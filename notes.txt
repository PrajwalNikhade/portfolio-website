

## Problems

.
3. Metadata : The layout.js file contains default Next.js metadata ("Create Next App") rather than personalized information.



## Improvements
1. Component Structure :
   
   - Rename the Nav component correctly:
   Nav.jsx
   
   Apply
   
   Open Folder
   
   1
   
   2
   
   3
   
   4
   
   5
   
   6
   
   // ... existing code ...
   
   const Nav = ( ) => {
   
   // ... existing code ...
   
   }
   
   export default Nav ;
2. Content Improvements :
   
   - Replace placeholder content in the Main component:
   Main.jsx
   
   Apply
   
   Open Folder
   
   1
   
   2
   
   3
   
   4
   
   5
   
   // ... existing code ...
   
   < div className = "right bg-
   
   [#FDC435] md:w-1/2 w-full" >
   
   { /* Add your profile
   
   image or other content
   
   here */ }
   
   </ div >
   
   // ... existing code ...
3. Metadata Update :
   
   - Update the metadata in layout.js:
   layout.js
   
   Apply
   
   Open Folder
   
   1
   
   2
   
   3
   
   4
   
   5
   
   6
   
   // ... existing code ...
   
   export const metadata = {
   
   title: "Prajwal Nikhade
   
   - Portfolio" ,
   
   description: "Full Stack
   
   Web Developer
   
   specializing in MERN
   
   Stack and Next.js" ,
   
   } ;
   
   // ... existing code ...
4. Social Links :
   
   - Update all social media links with your actual profiles:
   jsx
   
   Open Folder
   
   1
   
   < Link href = " https://
   
   linkedin.com/in/
   
   prajwalnikhade "
   
   target = "_blank" >
5. Form Handling :
   
   - Improve the Contact component with better form validation and error handling
   - Ensure environment variables are properly configured
6. Code Optimization :
   
   - Combine Project_card1 and Project_card2 into a single reusable component with a prop to control layout direction
7. Responsive Design :
   
   - Add more responsive design considerations for different screen sizes
   - Test on various devices to ensure consistent appearance
8. Performance :
   
   - Optimize image loading with proper sizing and formats
   - Consider implementing lazy loading for images
9. Accessibility :
   
   - Add more descriptive alt text for all images
   - Ensure proper contrast ratios for text readability
   - Add ARIA attributes where appropriate
10. SEO Improvements :
    
    - Add proper meta tags for social sharing
    - Implement structured data for better search engine visibility
Implementing these changes will significantly improve your portfolio website's functionality, appearance, and user experience.




"use client"
import React, { useState, useRef } from 'react'
import Button from './Button'
import Image from 'next/image'
import Link from 'next/link'
import { ToastContainer, toast, Slide } from 'react-toastify'
import 'react-toastify/dist/ReactToastify.css'
import emailjs from '@emailjs/browser'

// initializing emailjs 

emailjs.init(process.env.NEXT_PUBLIC_EMAILJS_PUBLIC_KEY);
const Contact = () => {
  const form = useRef();
  
  // Form state
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    message: ''
  })
  
  // Error state
  const [errors, setErrors] = useState({
    name: '',
    email: '',
    message: ''
  })

  // Handle input changes
  const handleChange = (e) => {
    const { name, value } = e.target
    setFormData({
      ...formData,
      [name]: value
    })
    
    // Clear error when user starts typing
    if (errors[name]) {
      setErrors({
        ...errors,
        [name]: ''
      })
    }
  }
  
  // Validate form
  const validateForm = () => {
    let valid = true
    const newErrors = { name: '', email: '', message: '' }
    
    // Name validation - at least 2 characters
    if (formData.name.trim().length < 2) {
      newErrors.name = 'Name must be at least 2 characters'
      valid = false
    }
    
    // Email validation with regex
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
    if (!emailRegex.test(formData.email)) {
      newErrors.email = 'Please enter a valid email address'
      valid = false
    }
    
    // Message validation - at least 10 characters
    if (formData.message.trim().length < 10) {
      newErrors.message = 'Message must be at least 10 characters'
      valid = false
    }
    
    setErrors(newErrors)
    return valid
  }
  
  const handleSubmit = (e) => {
    e.preventDefault()
    
    // Validate form before submission
    if (validateForm()) {
      // EmailJS configuration
      emailjs.sendForm(
        process.env.NEXT_PUBLIC_EMAILJS_SERVICE_ID, 
        process.env.NEXT_PUBLIC_EMAILJS_TEMPLATE_ID, 
        form.current,
       process.env.NEXT_PUBLIC_EMAILJS_PUBLIC_KEY // Replace with your Public Key
      )
      .then((result) => {
        toast.success("Message sent successfully!", {
          position: "top-center",
          autoClose: 5000,
          hideProgressBar: false,
          closeOnClick: true,
          pauseOnHover: true,
          draggable: true,
          progress: undefined,
          theme: "light",
          transition: Slide,
        })
        
        // Reset form after successful submission
        setFormData({
          name: '',
          email: '',
          message: ''
        })
      }, (error) => {
        console.log(error.text);
        toast.error("Failed to send message. Please try again.", {
          position: "top-center",
          autoClose: 5000,
          hideProgressBar: false,
          closeOnClick: true,
          pauseOnHover: true,
          draggable: true,
          progress: undefined,
          theme: "light",
          transition: Slide,
        })
      });
    } else {
      // Form has errors
      toast.error("Please fill correct information ", {
        position: "top-center",
        autoClose: 5000,
        hideProgressBar: false,
        closeOnClick: true,
        pauseOnHover: true,
        draggable: true,
        progress: undefined,
        theme: "light",
        transition: Slide,
      })
    }
  }

  const handleKeyDown = (e) => {
    if (e.key === 'Enter') {
      e.preventDefault();
      const form = e.target.form;
      const index = [...form].indexOf(e.target);
      form.elements[index + 1]?.focus();
    }
  }
  
  return (
    <>  
      <div className="tx flex flex-col justify-center items-center m-3 gap-3 ">
        <h2 className='text-5xl font-bold underline decoration-[#FDC435] '>Contact</h2>
        <p className='text-2xl'>Feel free to contact</p>
      </div>
      <div className='border-2 border-[#FDC435] md:w-fit w-[90%] mx-auto mb-10 mt-5 p-10 rounded-2xl'>
        <form ref={form} onSubmit={handleSubmit} className='flex flex-col justify-center'>
          <p className='text-lg mx-2'>Name</p>
          <input 
            type="text" 
            placeholder='Enter Your Name' 
            className={`my-2 border-2 bg-[#F9FAFF] border-[#FDC435] p-2 ${errors.name ? 'border-red-500' : ''}`} 
            name='name'
            value={formData.name}
            onChange={handleChange}
            onKeyDown={handleKeyDown}
          /> 
          {errors.name && <p className="text-red-500 text-sm ml-2">{errors.name}</p>}
          
          <p className='text-lg mx-2'>Email</p>
          <input 
            type="email" 
            placeholder='Enter Your Email' 
            className={`my-2 border-2 bg-[#F9FAFF] border-[#FDC435] p-2 ${errors.email ? 'border-red-500' : ''}`} 
            name='email'
            value={formData.email}
            onChange={handleChange}
            onKeyDown={handleKeyDown}
          /> 
          {errors.email && <p className="text-red-500 text-sm ml-2">{errors.email}</p>}
          
          <p className='text-lg mx-2'>Message</p>
          <textarea  
            placeholder='Enter Your Message' 
            className={`my-2 border-2 bg-[#F9FAFF] border-[#FDC435] p-2 min-h-[100px] ${errors.message ? 'border-red-500' : ''}`} 
            name='message'
            value={formData.message}
            onChange={handleChange}
            onKeyDown={handleKeyDown}
          /> 
          {errors.message && <p className="text-red-500 text-sm ml-2">{errors.message}</p>}
          
          <Button className={"m-5 p-3"} type='submit'>Send</Button>
        </form>
      </div>
      
      <div className="logos flex flex-col gap-2 justify-center items-center my-5  ">
    
      <h4 className='font-bold underline decoration-[#FDC435] text-3xl my-2'>Other ways to contact</h4>
      <div className="flex flex-row gap-3"> 
            <Link href="https://linkedin.com" target="_blank">
              <Image src="/bi_linkedin.svg" alt="Connect with me on LinkedIn" width={50} height={50} className='hover:scale-110'/>
            </Link>
            <Link href="mailto:your-email@example.com">
              <Image src="/bi_envelope-fill.svg" alt="Send me an email" width={50} height={50} className='hover:scale-110'/>
            </Link>
            <Link href="https://github.com" target="_blank">
              <Image src="/icons8-github.svg" alt="View my projects on GitHub" width={50} height={50} className='hover:scale-110'/>
            </Link>
      </div>
        </div>
        <ToastContainer
        position="top-center"
        autoClose={5000}
        limit={1}
        hideProgressBar={false}
        newestOnTop={false}
        closeOnClick={true}
        rtl={false}
        pauseOnFocusLoss
        draggable
        pauseOnHover
        theme="light"
        transition={Slide}
      />
</>
  )
}
export default Contact

